plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT' apply false
    id 'maven-publish'
    id "java-library"
}

version = project.mod_version
group = "me.gravityio.goodlib"

def pdepend(project, List<String> depNames) {
    def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: "namedElements") }
    project.dependencies {
        deps.each {
            api it
        }
    }

    project.publishing {
        publications {
            mavenJava(MavenPublication) {
                pom.withXml {
                    def depsNode = asNode().appendNode("dependencies")
                    deps.each {
                        def depNode = depsNode.appendNode("dependency")
                        depNode.appendNode("groupId", it.group)
                        depNode.appendNode("artifactId", it.name)
                        depNode.appendNode("version", it.version)
                        depNode.appendNode("scope", "compile")
                    }
                }
            }
        }
    }
}

allprojects {
    group = "me.gravityio.goodlib"
    version = project.mod_version

    apply plugin: "maven-publish"
    apply plugin: "fabric-loom"
    apply plugin: "java-library"

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    processResources {
        inputs.property "version", project.version
        inputs.property "minecraft_version", project.minecraft_version
        inputs.property "loader_version", project.loader_version
        filteringCharset "UTF-8"

        filesMatching("fabric.mod.json") {
            expand "version": project.version,
                    "minecraft_version": project.minecraft_version,
                    "loader_version": project.loader_version
        }
    }

    java {
        withSourcesJar()
    }


    sourceSets {
        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }

        testmodClient {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath

            compileClasspath += testmod.compileClasspath
            runtimeClasspath += testmod.runtimeClasspath
        }

        test {
            compileClasspath += testmodClient.compileClasspath
            runtimeClasspath += testmodClient.runtimeClasspath
        }
    }

    loom {
        runs {
            testmodClient {
                client()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Client"
                source sourceSets.testmodClient
            }
            testmodServer {
                server()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Server"
                source sourceSets.testmod
            }
        }
    }

    allprojects.each { p ->
        loom.mods.register(p.name) {
            sourceSet p.sourceSets.main
        }

        loom.mods.register(p.name + "-testmod") {
            sourceSet p.sourceSets.testmod
            sourceSet p.sourceSets.testmodClient
        }
    }

    repositories {
        mavenLocal()
        maven { url = "https://jitpack.io"	}
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

        testmodImplementation sourceSets.main.output
        testmodClientImplementation sourceSets.main.output
        testmodClientImplementation sourceSets.testmod.output

        testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"
        testImplementation sourceSets.testmodClient.output

        // Mixin Extras
        implementation("com.github.LlamaLad7:MixinExtras:0.1.1")
        annotationProcessor("com.github.LlamaLad7:MixinExtras:0.1.1")
    }

    test {
        useJUnitPlatform()
    }

}

dependencies {
    include("com.github.LlamaLad7:MixinExtras:0.1.1")
    subprojects.each {
        api project(path: "${it.path}", configuration: "namedElements")
    }
}

subprojects {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact(remapJar) {
                    builtBy(remapJar)
                }

                artifact(remapSourcesJar) {
                    builtBy remapSourcesJar
                }
            }
        }
    }
    loom.disableDeprecatedPomGeneration(publishing.publications.mavenJava)
}

remapJar {
    afterEvaluate {
        subprojects.each {
            // Include the signed or none signed jar from the sub project.
            nestedJars.from project("${it.path}").tasks.getByName("remapJar")
        }
    }
}

subprojects.each {
    remapJar.dependsOn("${it.path}:remapJar")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy(remapJar)
            }

            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", it.group)
                    depNode.appendNode("artifactId", it.name)
                    depNode.appendNode("version", it.version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }
}


